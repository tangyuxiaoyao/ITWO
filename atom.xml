<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ITWO</title>
  
  <subtitle>毋庸多言,只管前行.</subtitle>
  <link href="/ITWO/atom.xml" rel="self"/>
  
  <link href="http://www.tangyuxiaoyao.club/ITWO/"/>
  <updated>2019-06-06T06:41:30.842Z</updated>
  <id>http://www.tangyuxiaoyao.club/ITWO/</id>
  
  <author>
    <name>唐钰逍遥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用python seek 实现实时监控vpn多次尝试失败账号</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2019/06/06/%E5%88%A9%E7%94%A8python-seek-%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7vpn%E5%A4%9A%E6%AC%A1%E5%B0%9D%E8%AF%95%E5%A4%B1%E8%B4%A5%E8%B4%A6%E5%8F%B7/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2019/06/06/利用python-seek-实现实时监控vpn多次尝试失败账号/</id>
    <published>2019-06-06T03:15:00.000Z</published>
    <updated>2019-06-06T06:41:30.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h2><ul><li>运维那边有个要求，需要实时监控openvpn账号的登录状况，如果某个账号登录次数过多，需要备案提醒。</li></ul><a id="more"></a><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li>根据需求，我们需要先分析下vpn客户端和服务器端交互的日志，分析得到哪行的日志数据带有代表性，经分析得到如下的日志具有代表性：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AUTH-PAM: BACKGROUND: user foo failed to authenticate: Cannot make/remove an entry for the specified session</div></pre></td></tr></table></figure><ul><li>从上面的关键日志我们可以拿到以上登录的账号名，然后把该名称记录下来然后发邮件去提醒就可以了。</li></ul><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><h3 id="shell-实现"><a href="#shell-实现" class="headerlink" title="shell 实现"></a>shell 实现</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail -100f   /home/koulb/data/a.txt |grep <span class="string">"failed to authenticate"</span>  |awk -F <span class="string">'user'</span> <span class="string">'&#123;print $2&#125;'</span> |cut -d<span class="string">' '</span> -f2</div></pre></td></tr></table></figure><h3 id="python-实现"><a href="#python-实现" class="headerlink" title="python 实现"></a>python 实现</h3><ul><li><p>shell 的实现方式并不能实现实时,tail -f 的方式管道过多,就会失去了原有的实时效能.</p></li><li><p>python 实现脚本如下:</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- encoding: utf8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 用open打开文件</span></div><div class="line"><span class="comment"># 用seek文件指针，跳到文件最后面</span></div><div class="line"><span class="comment"># while True进行循环</span></div><div class="line"><span class="comment"># 持续不停的readline，如果能读到内容，打印出来即可</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">tail_one</span><span class="params">(log_file, failed_file, failed_limit)</span>:</span></div><div class="line">    failed_users = &#123;&#125;</div><div class="line">    <span class="keyword">with</span> open(log_file, <span class="string">"r"</span>) <span class="keyword">as</span> r:</div><div class="line">        r.seek(<span class="number">0</span>, <span class="number">2</span>)</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            line = r.readline()</div><div class="line">            <span class="keyword">if</span> line:</div><div class="line">                <span class="keyword">if</span> <span class="string">"failed to authenticate"</span> <span class="keyword">in</span> line.strip():</div><div class="line">                    tempDetail = line.split(<span class="string">"user"</span>)</div><div class="line">                    finalDetail = tempDetail[<span class="number">1</span>].split(<span class="string">" "</span>)</div><div class="line">                    failed_user = finalDetail[<span class="number">1</span>]</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (failed_user <span class="keyword">in</span> failed_users.keys()):</div><div class="line">                        cnt = failed_users[failed_user]</div><div class="line">                        failed_users[failed_user] = cnt + <span class="number">1</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        failed_users[failed_user] = <span class="number">1</span></div><div class="line">                    <span class="keyword">for</span> key <span class="keyword">in</span> failed_users.keys():</div><div class="line">                        <span class="keyword">if</span> (failed_users[key] &gt;= failed_limit):</div><div class="line">                            <span class="keyword">with</span> open(failed_file, <span class="string">"a+"</span>) <span class="keyword">as</span> w:</div><div class="line">                                w.write(key + <span class="string">"\n"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">3</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"usage: python SeekFile.py 要监控的vpn日志 多次尝试登录失败的人员名单文件 失败次数"</span></div><div class="line">        exit(<span class="number">-1</span>)</div><div class="line">    log_file = sys.argv[<span class="number">1</span>]</div><div class="line">    failed_file = sys.argv[<span class="number">2</span>]</div><div class="line">    failed_limit = int(sys.argv[<span class="number">3</span>])</div><div class="line">    <span class="keyword">print</span>   <span class="string">"要监控的vpn日志: "</span> + log_file</div><div class="line">    <span class="keyword">print</span>   <span class="string">"人员名单文件: "</span> + failed_file</div><div class="line">    tail_one(log_file, failed_file, failed_limit)</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>对于python io 的api 了解还不是很透彻,很多东西不能即拿即用,需要进一步加强.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求背景&quot;&gt;&lt;a href=&quot;#需求背景&quot; class=&quot;headerlink&quot; title=&quot;需求背景&quot;&gt;&lt;/a&gt;需求背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;运维那边有个要求，需要实时监控openvpn账号的登录状况，如果某个账号登录次数过多，需要备案提醒。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/python/"/>
    
      <category term="seek" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/seek/"/>
    
      <category term="vpn" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title>hexo yilla 和github 结合搭建个人博客</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2019/05/29/hexo%20yilia%20github%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2019/05/29/hexo yilia github 搭建个人博客/</id>
    <published>2019-05-29T07:19:41.793Z</published>
    <updated>2018-04-16T03:17:28.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么考虑这样的搭配方式"><a href="#为什么考虑这样的搭配方式" class="headerlink" title="为什么考虑这样的搭配方式?"></a>为什么考虑这样的搭配方式?</h1><h2 id="构建需求"><a href="#构建需求" class="headerlink" title="构建需求"></a>构建需求</h2><blockquote><p>现阶段有很多的技术网站都带有给想要展示自己的一些技术入门以及技术研究的平台,也就常见的技术博客.<br>  但是大多都不满足于个性化定制,偶然间接触到markdown,当然简书等这样的平台也支持markdown,但是出于个人的独占情节,还是更倾向于搭建一个独立的自己可控的blog.<br><a id="more"></a></p><h2 id="技术实现-快速搭建"><a href="#技术实现-快速搭建" class="headerlink" title="技术实现(快速搭建)"></a>技术实现(快速搭建)</h2><p>考虑到如果从零开始,买空间,选域名,构建主体框架,渲染静态页面,一套走下来,未免本末倒置,博客注重的应该是文章的可读性以及质量,当然ui需要一定的可观瞻性.幸运的是遇到了hexo,给人一种转角遇到爱的小确幸.<br>      ps:Hexo is a fast, simple &amp; powerful blog framework powered by Node.js.<br>      从官网的解释可以看出,我们需要安装Node.js,当然要和gitbub结合,你需要申请一个github账号,申请账号的步骤,此处就不再累述.<br>      笔者使用的系统是ubantu 16.04</p><p>传送门:<a href="https://github.com/join" target="_blank" rel="external">github账号申请</a></p></blockquote><h3 id="现在演示安装Node-js"><a href="#现在演示安装Node-js" class="headerlink" title="现在演示安装Node.js."></a>现在演示安装Node.js.</h3><blockquote><p>在 Github 上获取 Node.js 源码：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo git <span class="built_in">clone</span> https://github.com/nodejs/node.git</div></pre></td></tr></table></figure><p> 1.修改目录权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo chmod -R 755 node</div><div class="line">$ <span class="built_in">cd</span> node</div><div class="line">$ node -v</div></pre></td></tr></table></figure></p><p> 2.使用 ./configure 创建编译文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ./configure</div></pre></td></tr></table></figure></p><p> 3.这一步，可能时间有点长，耐心等待<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo make</div></pre></td></tr></table></figure></p><p> 4.最后<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo make</div></pre></td></tr></table></figure></p><blockquote><p>install 查看版本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node -v</div></pre></td></tr></table></figure><blockquote><p>v0.10.25 如果node不是最新的，node有一个模块叫n，是专门用来管理node.js的版本的。使用npm（NPM是随同nodejs一起安装的包管理工具）安装n模块</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install -g n</div></pre></td></tr></table></figure><blockquote><p>然后，升级node.js到最新稳定版</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo n stable</div></pre></td></tr></table></figure><blockquote><p>旧版本的 npm，也可以很容易地通过 npm 命令来升级，命令如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install npm -g</div></pre></td></tr></table></figure><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><blockquote><p>执行以下的命令:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div><div class="line">$ hexo init blog 此处会新建一个新的目录存储hexo的一些初始化的文件.</div><div class="line">$ <span class="built_in">cd</span> blog</div><div class="line">$ npm install</div><div class="line">$ hexo server 此处会生成一个新的本地预览 访问http://localhost:4000 就可以访问本地的默认主题.</div></pre></td></tr></table></figure><h3 id="新建github仓库"><a href="#新建github仓库" class="headerlink" title="新建github仓库"></a>新建github仓库</h3><blockquote><p>新建一个仓库,然后选择public权限(写博客不就是为了别人看,进而监督自己进步么,所以public),指定git分支,使用默认的master分支即可,因为这个仓库就你一个看门的,这里面也是你的.然后记住自己的clone地址.<br>ps:记得保存.</p></blockquote><h3 id="将gitbub仓库和hexo主题绑定"><a href="#将gitbub仓库和hexo主题绑定" class="headerlink" title="将gitbub仓库和hexo主题绑定"></a>将gitbub仓库和hexo主题绑定</h3><blockquote><p>编辑_config.yml:</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">type</span>: git</div><div class="line"><span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/tangyuxiaoyao/ITWO.git</span></div><div class="line"><span class="attribute">branch</span>: master</div></pre></td></tr></table></figure><blockquote><p>repo配置的地址为上文已经提及过的项目仓库clone地址.<br>而且这里有看到仓库后面带有子资源路径所以参考配置文件中的注释,需要将root对应的配置改为仓库的名称资源路径.</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># URL</div><div class="line">## If your site <span class="keyword">is</span> <span class="keyword">put</span> in <span class="keyword">a</span> subdirectory, <span class="keyword">set</span> url <span class="keyword">as</span> <span class="string">'http://yoursite.com/child'</span> <span class="built_in">and</span> root <span class="keyword">as</span> <span class="string">'/child/'</span></div><div class="line">roo<span class="variable">t:</span> /ITWO/</div></pre></td></tr></table></figure><h3 id="发布主题到github仓库"><a href="#发布主题到github仓库" class="headerlink" title="发布主题到github仓库"></a>发布主题到github仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div><div class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</div></pre></td></tr></table></figure><ol><li>安装hexo发布模块deploy</li><li>清除缓存</li><li>生成静态页面</li><li>发布到github(每次改完以后也是这么稳妥发布)<h3 id="生成新的文章"><a href="#生成新的文章" class="headerlink" title="生成新的文章"></a>生成新的文章</h3></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> <span class="built_in">source</span>/_posts/</div><div class="line">$ hexo new <span class="string">"shell在指定行插入文本"</span></div></pre></td></tr></table></figure><blockquote><p>然后就会生成一个为该名称的md文件,根据md语法编辑内容,完成以后发布即可.<br>ps:可以用hexo clean &amp;&amp; hexo g &amp;&amp; hexo s在本地生成预览效果,避免发布到github上的效果不尽人意.</p></blockquote><p><img src="/ITWO/assets/jscy.jpg" alt="古人笑比庭中树,一日秋风一日疏"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么考虑这样的搭配方式&quot;&gt;&lt;a href=&quot;#为什么考虑这样的搭配方式&quot; class=&quot;headerlink&quot; title=&quot;为什么考虑这样的搭配方式?&quot;&gt;&lt;/a&gt;为什么考虑这样的搭配方式?&lt;/h1&gt;&lt;h2 id=&quot;构建需求&quot;&gt;&lt;a href=&quot;#构建需求&quot; class=&quot;headerlink&quot; title=&quot;构建需求&quot;&gt;&lt;/a&gt;构建需求&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;现阶段有很多的技术网站都带有给想要展示自己的一些技术入门以及技术研究的平台,也就常见的技术博客.&lt;br&gt;  但是大多都不满足于个性化定制,偶然间接触到markdown,当然简书等这样的平台也支持markdown,但是出于个人的独占情节,还是更倾向于搭建一个独立的自己可控的blog.&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/hexo/"/>
    
      <category term="yilla" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/yilla/"/>
    
      <category term="github" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop HDFS 数据自动平衡</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2019/05/29/%20Hadoop%20HDFS%20%E6%95%B0%E6%8D%AE%E8%87%AA%E5%8A%A8%E5%B9%B3%E8%A1%A1/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2019/05/29/ Hadoop HDFS 数据自动平衡/</id>
    <published>2019-05-29T07:19:41.681Z</published>
    <updated>2018-04-27T05:53:42.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hadoop-HDFS-数据自动平衡脚本使用方法"><a href="#Hadoop-HDFS-数据自动平衡脚本使用方法" class="headerlink" title="Hadoop HDFS 数据自动平衡脚本使用方法"></a>Hadoop HDFS 数据自动平衡脚本使用方法</h2><blockquote><p>在Hadoop中，包含一个start-balancer.sh脚本，通过运行这个工具，启动HDFS数据均衡服务。该工具可以做到热插拔，即无须重启计算机和 Hadoop 服务。HadoopHome/bin目录下的start−balancer.sh脚本就是该任务的启动脚本。启动命令为：‘HadoopHome/bin目录下的start−balancer.sh脚本就是该任务的启动脚本。启动命令为：‘Hadoop_home/bin/start-balancer.sh –threshold`<br><a id="more"></a></p></blockquote><h2 id="影响Balancer的几个参数："><a href="#影响Balancer的几个参数：" class="headerlink" title="影响Balancer的几个参数："></a>影响Balancer的几个参数：</h2><p>-threshold</p><blockquote><p>默认设置：10，参数取值范围：0-100<br>参数含义：判断集群是否平衡的阈值。理论上，该参数设置的越小，整个集群就越平衡<br>dfs.balance.bandwidthPerSec<br>默认设置：1048576（1M/S）<br>参数含义：Balancer运行时允许占用的带宽<br>示例如下：</p></blockquote><p>#启动数据均衡，默认阈值为 10%<br>$Hadoop_home/bin/start-balancer.sh</p><p>#启动数据均衡，阈值 5%<br>bin/start-balancer.sh –threshold 5</p><p>#停止数据均衡<br>$Hadoop_home/bin/stop-balancer.sh<br>在hdfs-site.xml文件中可以设置数据均衡占用的网络带宽限制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.balance.bandwidthPerSec<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1048576<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span> Specifies the maximum bandwidth that each datanode can utilize for the balancing purpose in term of the number of bytes per second. <span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hadoop-HDFS-数据自动平衡脚本使用方法&quot;&gt;&lt;a href=&quot;#Hadoop-HDFS-数据自动平衡脚本使用方法&quot; class=&quot;headerlink&quot; title=&quot;Hadoop HDFS 数据自动平衡脚本使用方法&quot;&gt;&lt;/a&gt;Hadoop HDFS 数据自动平衡脚本使用方法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在Hadoop中，包含一个start-balancer.sh脚本，通过运行这个工具，启动HDFS数据均衡服务。该工具可以做到热插拔，即无须重启计算机和 Hadoop 服务。HadoopHome/bin目录下的start−balancer.sh脚本就是该任务的启动脚本。启动命令为：‘HadoopHome/bin目录下的start−balancer.sh脚本就是该任务的启动脚本。启动命令为：‘Hadoop_home/bin/start-balancer.sh –threshold`&lt;br&gt;
    
    </summary>
    
    
      <category term="hadoop" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/hadoop/"/>
    
      <category term="hdfs" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/hdfs/"/>
    
      <category term="balancer" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/balancer/"/>
    
  </entry>
  
  <entry>
    <title>mapreduce 温故</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2019/05/29/mapredcue%20%E6%B8%A9%E4%B9%A0/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2019/05/29/mapredcue 温习/</id>
    <published>2019-05-29T07:19:41.669Z</published>
    <updated>2018-07-23T06:36:03.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求背景："><a href="#需求背景：" class="headerlink" title="需求背景："></a>需求背景：</h2><blockquote><p>做大数据有一段时间了，梳理下用到mapreduce的一些问题和解决方案。<a id="more"></a></p></blockquote><h2 id="mapreduce"><a href="#mapreduce" class="headerlink" title="mapreduce"></a>mapreduce</h2><blockquote><p>mapreduce:顾名思义，map做映射，reduce做规约。<br>主要分以下步骤：<br>1.输入分块<br>2.map<br>3.shuffer<br>4.reduce</p></blockquote><p><img src="/ITWO/assets/mapreduce01.jpg" alt="mapredcue流程图"><br>重点是shuffer阶段</p><h2 id="reduce个数的计算方法"><a href="#reduce个数的计算方法" class="headerlink" title="reduce个数的计算方法:"></a>reduce个数的计算方法:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> bytes = Math.max(totalInputFileSize, bytesPerReducer);</div><div class="line"><span class="keyword">int</span> reducers = (<span class="keyword">int</span>) Math.ceil(bytes / bytesPerReducer);</div><div class="line">reducers = Math.max(<span class="number">1</span>, reducers);</div><div class="line">reducers = Math.min(maxReducers, reducers);</div></pre></td></tr></table></figure><blockquote><p>　从计算逻辑可以看出该量由输入文件的大小以及设置的每个reduce可以处理的字节数大小决定．</p></blockquote><p><img src="/ITWO/assets/mapreduce02.png" alt="shuffer流程图"></p><h2 id="流程细节："><a href="#流程细节：" class="headerlink" title="流程细节："></a>流程细节：</h2><h3 id="map输出过程："><a href="#map输出过程：" class="headerlink" title="map输出过程："></a>map输出过程：</h3><blockquote><p>&ensp;&ensp;&ensp;&ensp;如果没有reduce阶段，则直接输出到hdfs上，如果有reduce作业，则每个map方法的输出在写磁盘前先在内存中缓存。每个map task都有一个环状的内存缓冲区，存储着map的输出结果，默认100m，在写磁盘时，根据reduce的数量把数据划分为相应的分区(使用默认的分区算法（对输入文件的kv中对key hash后再对reduce task数量取模(reduce个数的算法见前文)),默认的hashPartioner只会作用默认分隔符分割以后的key，如果需要自定义分区，则需要你自定义二次分区比如keyfieldParttioner来实现,在每个分区中数据进行内排序，分区的个数和reduce的个数是一致的，在每次当缓冲区快满的时候由一个独立的线程将缓冲区的数据以一个溢出文件的方式存放到磁盘(这个溢写是由单独线程来完成，不影响往缓冲区写map结果的线程。溢写线程启动时不应该阻止map的结果输出，所以整个缓冲区有个溢写的比例spill.percent。这个比例默认是0.8，也就是当缓冲区的数据已经达到阈值（buffer size <em> spill percent = 100MB </em> 0.8 = 80MB），溢写线程启动，锁定这80MB的内存，执行溢写过程。Map task的输出结果还可以往剩下的20MB内存中写，互不影响。)，当整个map task结束后再对磁盘中这个map task产生的所有溢出文件做合并，被合并成已分区且已排序的输出文件。然后reduce开始fetch（拉取）map端合并好对应分区的数据，然后在reduce端合并（因为会有很多map的输出，需要合并），此时在reduce端也会进行一次sort,确保所有map的输出都排序并合并成完成以后，才会启动reduce task,所以怎么才能确保你在reduce逻辑处理时拿到的是你要的排序后的数据配合你的处理就至关重要了。</p></blockquote><h3 id="reducer如何知道要从哪个tasktracker取得map输出呢？"><a href="#reducer如何知道要从哪个tasktracker取得map输出呢？" class="headerlink" title="reducer如何知道要从哪个tasktracker取得map输出呢？"></a>reducer如何知道要从哪个tasktracker取得map输出呢？</h3><blockquote><p>&ensp;&ensp;&ensp;&ensp;map任务成功完成以后，他们会通知其父tasktracker状态已更新，然后taskTracker进而通知jobTracker。这些通知在前面的心跳机制中传输。因此，对于指定作业，jobTracker知道map输出和taskTracker之间的映射关系。reducer中的一个线程定期询问jobTracher以便获取map输出的位置,直到它获得所有输出位置。</p></blockquote><h3 id="map和reduce如何合理控制自己的个数？"><a href="#map和reduce如何合理控制自己的个数？" class="headerlink" title="map和reduce如何合理控制自己的个数？"></a>map和reduce如何合理控制自己的个数？</h3><blockquote><p>&ensp;&ensp;&ensp;&ensp;map的个数是由dfs.block.size控制，该配置可以在执行程序之前由参数（见下文）控制，默认配置位于hdfs-site.xml中dfs.block.size控制，1.x的默认配置为64m,2.x的默认配置为128m,</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="keyword">long</span> goalSize = totalSize / (numSplits == <span class="number">0</span> ? <span class="number">1</span> : numSplits);</div><div class="line"> <span class="keyword">long</span> minSize = Math.max(job.getLong(org.apache.hadoop.mapreduce.lib.input.</div><div class="line">    FileInputFormat.SPLIT_MINSIZE, <span class="number">1</span>), minSplitSize);</div><div class="line"><span class="keyword">long</span> blockSize = file.getBlockSize();</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">computeSplitSize</span><span class="params">(<span class="keyword">long</span> goalSize, <span class="keyword">long</span> minSize,</span></span></div><div class="line"><span class="function"><span class="params">                                     <span class="keyword">long</span> blockSize)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> Math.max(minSize, Math.min(goalSize, blockSize));</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;从上面可以看出，最终的split size是由三个因素决定，goalsize为map输入数据除以用户自己设置的map个数（默认为1）得到的;minsize为mapred-site.xml配置的mapred.min.split.size决定，因为minSplitSize为1;第三个影响因素为blocksize,这个看配置，最终我们可以得出,如果不设置min.size,则由blocksize决定，如果设置了，则是由这两者中大的一个决定。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">set</span> mapred.min.split.size=256000000;        -- 决定每个map处理的最大的文件大小，单位为B</div><div class="line"></div><div class="line">方法1</div><div class="line"><span class="built_in">set</span> mapred.reduce.tasks=10;  -- 设置reduce的数量</div><div class="line">方法2</div><div class="line"><span class="built_in">set</span> hive.exec.reducers.bytes.per.reducer=1073741824 -- 每个reduce处理的数据量,默认1GB</div></pre></td></tr></table></figure><p>block_size : hdfs的文件块大小，默认为64M，可以通过参数dfs.block.size设置<br>total_size : 输入文件整体的大小<br>input_file_num : 输入文件的个数</p><p>（1）默认map个数</p><blockquote><p>如果不进行任何设置，默认的map个数是和blcok_size相关的。<br>   default_num = total_size / block_size;</p></blockquote><p>（2）期望大小</p><blockquote><p>可以通过参数mapred.map.tasks来设置程序员期望的map个数，但是这个个数只有在大于default_num的时候，才会生效。<br>   goal_num = mapred.map.tasks;</p></blockquote><p>（3）设置处理的文件大小</p><blockquote><p>可以通过mapred.min.split.size 设置每个task处理的文件大小，但是这个大小只有在大于block_size的时候才会生效。<br>   split_size = max(mapred.min.split.size, block_size);<br>   split_num = total_size / split_size;</p></blockquote><p>（4）计算的map个数</p><blockquote><p>compute_map_num = min(split_num,  max(default_num, goal_num))</p><p>&ensp;&ensp;&ensp;&ensp;除了这些配置以外，mapreduce还要遵循一些原则。 mapreduce的每一个map处理的数据是不能跨越文件的，也就是说min_map_num &gt;= input_file_num。 所以，最终的map个数应该为：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">final_map_num = max(compute_map_num, input_file_num)</div></pre></td></tr></table></figure><blockquote><p>经过以上的分析，在设置map个数的时候，可以简单的总结为以下几点：<br>（1）如果想增加map个数，则设置mapred.max.split.size为一个较小的值。<br>（2）如果想减小map个数，则设置mapred.min.split.size 为一个较大的值。</p></blockquote><p>reduce个数的设置则相对简单，要么你设置mapred.reduce.tasks的数值，要么你在hive中可以设置每个reduce可以处理的字节数，从而约束reduce的个数。</p><blockquote><p>小技巧</p></blockquote><p>&ensp;&ensp;&ensp;&ensp;在hive中带空的设置参数可以打印出当前该参数的设置值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hive&gt; set dfs.block.size;</div><div class="line">dfs.block.size=268435456</div><div class="line">hive&gt; set mapred.map.tasks;</div><div class="line">mapred.map.tasks=2</div></pre></td></tr></table></figure><h2 id="mapreduce进度说明"><a href="#mapreduce进度说明" class="headerlink" title="mapreduce进度说明"></a>mapreduce进度说明</h2><h3 id="1-Prepare"><a href="#1-Prepare" class="headerlink" title="1. Prepare"></a>1. Prepare</h3><blockquote><p>准备数据，抓取Map过来的输出（进度：0~33%）</p></blockquote><h3 id="2-Sort"><a href="#2-Sort" class="headerlink" title="2. Sort"></a>2. Sort</h3><blockquote><p>排序阶段（进度：33%~66%）</p></blockquote><h3 id="3-Reduce"><a href="#3-Reduce" class="headerlink" title="3. Reduce"></a>3. Reduce</h3><blockquote><p>真正的reduce计算阶段，执行你所写的reduce代码（进度：66%~100%）.<br>如果前面66%速度很快，后面慢的话就是reduce部分没有写好；否则才是数据量大的问题。</p></blockquote><h2 id="hadoop-yarn-配置的图解"><a href="#hadoop-yarn-配置的图解" class="headerlink" title="hadoop yarn 配置的图解"></a>hadoop yarn 配置的图解</h2><p><img src="/ITWO/assets/hadoop 2.0 yarn 配置项.png" alt="hadoop yarn 配置的图解"></p><h3 id="AM的内存使用错误"><a href="#AM的内存使用错误" class="headerlink" title="AM的内存使用错误"></a>AM的内存使用错误</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Diagnostics: Container [pid=<span class="number">21387</span>,containerID=container_e33_1532170420957_0001_02_000001] is running beyond physical memory limits. </div><div class="line">Current usage: <span class="number">1.1</span> GB of <span class="number">1</span> GB physical memory used; <span class="number">2.7</span> GB of <span class="number">2.1</span> GB virtual memory used. Killing container.</div><div class="line">Dump of the process-tree <span class="keyword">for</span> container_e33_1532170420957_0001_02_000001 :</div><div class="line">        |- <span class="function">PID PPID PGRPID SESSID CMD_NAME <span class="title">USER_MODE_TIME</span><span class="params">(MILLIS)</span> <span class="title">SYSTEM_TIME</span><span class="params">(MILLIS)</span> <span class="title">VMEM_USAGE</span><span class="params">(BYTES)</span> <span class="title">RSSMEM_USAGE</span><span class="params">(PAGES)</span> FULL_CMD_LINE</span></div><div class="line"><span class="function">        |- 21399 21387 21387 21387 <span class="params">(java)</span> 14478 467 2856710144 281207 /usr/lib/jvm/java-8-oracle/bin/java </span></div><div class="line"><span class="function">-Dlog4j.configuration</span>=container-log4j.properties </div><div class="line">-Dyarn.app.container.log.dir=/data/dev/sdb1/yarn/container-logs/application_1532170420957_0001/container_e33_1532170420957_0001_02_000001 </div><div class="line">-Dyarn.app.container.log.filesize=<span class="number">0</span> -Dhadoop.root.logger=INFO,CLA </div><div class="line">-Dhadoop.root.logfile=syslog </div><div class="line">-Djava.net.preferIPv4Stack=<span class="keyword">true</span> -Xmx825955249 org.apache.hadoop.mapreduce.v2.app.MRAppMaster</div></pre></td></tr></table></figure><blockquote><p>仔细预览以上的错误可以定位到以下的信息</p></blockquote><ol><li>AppMaster报出的错误</li><li>-Xmx825955249 设置了运行的参数值</li></ol><blockquote><p>结合图示我们找下应该去集群找那些配置来定位问题</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">上限参数:yarn.app.mapreduce.am.resource.mb</div><div class="line">运行参数:yarn.app.mapreduce.am.command-opts</div></pre></td></tr></table></figure><blockquote><p>以上的这两参数肯定少不了，后来从集群中的确也定位到的确是是yarn.app.mapreduce.am.resource.mb该参数差的设定过小为1G，同时yarn.app.mapreduce.am.command-opts为报错中的展示信息，需要更改，因为这两项更改的都是yarn-site.xml中的配置，cdh中改完之后保存分发这些信息，然后重启集群。</p></blockquote><table><thead><tr><th>配置文件</th><th>配置项</th><th>设置值</th></tr></thead><tbody><tr><td>yarn-site.xml</td><td>yarn.nodemanager.resource.memory-mb</td><td>Container数量 * 每个Container的内存大小</td></tr><tr><td>yarn-site.xml</td><td>yarn.scheduler.minimum-allocation-mb</td><td>每个Container的内存大小</td></tr><tr><td>yarn-site.xml</td><td>yarn.scheduler.maximum-allocation-mb</td><td>Container数量 * 每个Container的内存大小</td></tr><tr><td>mapred-site.xml</td><td>mapreduce.map.memory.mb</td><td>每个Container的内存大小</td></tr><tr><td>mapred-site.xml</td><td>mapreduce.reduce.memory.mb</td><td>2 * 每个Container的内存大小</td></tr><tr><td>mapred-site.xml</td><td>mapreduce.map.java.opts</td><td>0.8 * 每个Container的内存大小</td></tr><tr><td>mapred-site.xml</td><td>mapreduce.reduce.java.opts</td><td>0.8 <em> 2 </em> 每个Container的内存大小</td></tr><tr><td>yarn-site.xml (check)</td><td>yarn.app.mapreduce.am.resource.mb</td><td>2 * 每个Container的内存大小</td></tr><tr><td>yarn-site.xml (check)</td><td>yarn.app.mapreduce.am.command-opts</td><td>0.8 <em> 2 </em> 每个Container的内存大小</td></tr></tbody></table><blockquote><p>以上为各配置的位置以及建议的设置值。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">例如：</div><div class="line">集群的节点有 12 CPU cores, 48 GB RAM, and 12 磁盘.</div><div class="line">预留内存= 6 GB 系统预留 + 8 GB HBase预留</div><div class="line">最小Container内存大小 = 2 GB</div><div class="line"></div><div class="line">如果不安装 HBase:</div><div class="line"><span class="meta">#</span><span class="bash">Container数 = min (2*12, 1.8* 12, (48-6)/2) = min (24, 21.6, 21) = 21</span></div><div class="line">每个Container的内存大小 = max (2, (48-6)/21) = max (2, 2) = 2</div><div class="line"></div><div class="line">如果安装 Hbase：</div><div class="line"><span class="meta">#</span><span class="bash">Container数 = min (2*12, 1.8* 12, (48-6-8)/2) = min (24, 21.6, 17) = 17</span></div><div class="line">每个Container的内存大小 = max (2, (48-6-8)/17) = max (2, 2) = 2</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求背景：&quot;&gt;&lt;a href=&quot;#需求背景：&quot; class=&quot;headerlink&quot; title=&quot;需求背景：&quot;&gt;&lt;/a&gt;需求背景：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;做大数据有一段时间了，梳理下用到mapreduce的一些问题和解决方案。
    
    </summary>
    
    
      <category term="mapreduce" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/mapreduce/"/>
    
      <category term="shuffer" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/shuffer/"/>
    
  </entry>
  
  <entry>
    <title>线上mongo查询过慢排查总结</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2019/05/29/%E7%BA%BF%E4%B8%8Amongo%E6%9F%A5%E8%AF%A2%E8%BF%87%E6%85%A2%E6%8E%92%E6%9F%A5%E6%80%BB%E7%BB%93/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2019/05/29/线上mongo查询过慢排查总结/</id>
    <published>2019-05-29T07:19:41.497Z</published>
    <updated>2019-03-12T02:50:01.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a>现象描述</h2><blockquote><p>日志监控系统提示mongo查询耗时过长，提示信息如下</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">【app】银联智惠监控中心</div><div class="line">项目: goblin#01-&gt;mongo</div><div class="line">主机: lrma02</div><div class="line">时间: 2019-02-27 15:30:00</div><div class="line">详情: mongo响应时间超过阈值,1分钟内响应时间超过1000ms占比大于10.0%,当前占比:12.20%,总请求次数:164</div></pre></td></tr></table></figure><a id="more"></a><h2 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a>排查思路</h2><blockquote><p>针对以上提示，可以定位到中间件为mongo，相关人员第一时间要通知到运维查看mongo的操作日志，从而在后台定位到查询耗时过长的是那张表以及查询条件是什么？日志表象如下:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="number">2019</span>-<span class="number">02</span>-<span class="number">27</span>T15:<span class="number">21</span>:<span class="number">07.038</span>+<span class="number">0800</span> I COMMAND  [conn25570] command clearing.fee_detail command: find &#123; find: <span class="string">"fee_detail"</span>, filter: &#123; account: <span class="string">"F1130004"</span>, interfacePath: <span class="string">"/index/personal"</span>, smartOrderId: <span class="string">"91dce17a-bd66-4eeb-959c-57f961802a72"</span> &#125;, limit: <span class="number">1</span>, singleBatch: <span class="keyword">true</span> &#125; planSummary: IXSCAN &#123; account: <span class="number">1</span>, interface_path: <span class="number">1</span>, batch: <span class="number">1</span> &#125; keysExamined:<span class="number">351130</span> docsExamined:<span class="number">351130</span> cursorExhausted:<span class="number">1</span> numYields:<span class="number">2750</span> nreturned:<span class="number">0</span> reslen:<span class="number">107</span> locks:&#123; Global: &#123; acquireCount: &#123; r: <span class="number">5502</span> &#125; &#125;, Database: &#123; acquireCount: &#123; r: <span class="number">2751</span> &#125; &#125;, Collection: &#123; acquireCount: &#123; r: <span class="number">2751</span> &#125; &#125; &#125; protocol:op_query <span class="number">1750</span>ms</div></pre></td></tr></table></figure><blockquote><p>从操作日志可定位到表名:fee_detail,查询的条件涉及到的字段: { account: “F1130004”, interfacePath: “/index/personal”, smartOrderId: “91dce17a-bd66-4eeb-959c-57f961802a72” },接下来需要做的就是使用该条件去查询该表并打印它的执行计划，在执行计划中查看<br>命令: db.table.find({ account: “F1130004”, interfacePath: “/index/personal”, smartOrderId: “91dce17a-bd66-4eeb-959c-57f961802a72” }).explain()</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"> db.table.find(&#123;"col":"CYHS1301942"&#125;).explain()</div><div class="line">&#123;</div><div class="line">    "queryPlanner" : &#123;</div><div class="line">        "plannerVersion" : 1,</div><div class="line">        "namespace" : "db.table",    #集合</div><div class="line">        "indexFilterSet" : false,</div><div class="line">        "parsedQuery" : &#123;</div><div class="line">            "b" : &#123;</div><div class="line">                "$eq" : "CYHS1301942"</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        "winningPlan" : &#123;</div><div class="line">            "stage" : "FETCH",</div><div class="line">            "inputStage" : &#123;</div><div class="line">                "stage" : "IXSCAN",     #索引扫描，COLLSCAN表示全表扫描。</div><div class="line">                "keyPattern" : &#123;</div><div class="line">                    "account" : 1,</div><div class="line">                    "interfacePath" : 1</div><div class="line">"smartOrderId" : 1</div><div class="line">                &#125;,</div><div class="line">                "indexName" : "account_1_interfacePath_1_smartOrderId_1", #索引名</div><div class="line">                "isMultiKey" : false,</div><div class="line">                "direction" : "forward",</div><div class="line">                "indexBounds" : &#123;</div><div class="line">                    "account" : [</div><div class="line">                        "[\"CYHS1301942\", \"CYHS1301942\"]"</div><div class="line">                    ],</div><div class="line">                    "interfacePath" : [</div><div class="line">                        "[MinKey, MaxKey]"</div><div class="line">                    ],</div><div class="line">"smartOrderId" : [</div><div class="line"> "[\"91dce17a-bd66-4eeb-959c-57f961802a72\", \"91dce17a-bd66-4eeb-959c-57f961802a73\"]"</div><div class="line">]</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        "rejectedPlans" : [ ]</div><div class="line">    &#125;,</div><div class="line">    "serverInfo" : &#123;</div><div class="line">        "host" : "mongo1",</div><div class="line">        "port" : 27017,</div><div class="line">        "version" : "3.0.4",</div><div class="line">        "gitVersion" : "0481c958daeb2969800511e7475dc66986fa9ed5"</div><div class="line">    &#125;,</div><div class="line">    "ok" : 1</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>从执行计划中从”stage” : “IXSCAN”该步骤中keyPattern可以看出具体使用的索引内容从而定位到用的复合索引是不是传输所用的索引。下午发现的问题是因为使用的索引并非建立的索引导致的查询缓慢。</p><p>也可以使用查看所有索引的方式来直接定位是不是所用到的索引存在</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">  db.fee_detail.getIndexes()</div><div class="line">[</div><div class="line">     &#123;</div><div class="line">         "v" : 2,</div><div class="line">         "key" : &#123;</div><div class="line">             "_id" : 1</div><div class="line">         &#125;,</div><div class="line">         "name" : "_id_",</div><div class="line">         "ns" : "clearing.fee_detail"</div><div class="line">     &#125;,</div><div class="line">     &#123;</div><div class="line">         "v" : 2,</div><div class="line">         "key" : &#123;</div><div class="line">             "account" : 1,</div><div class="line">             "interface_path" : 1,</div><div class="line">             "batch" : 1</div><div class="line">         &#125;,</div><div class="line">         "name" : "account_path_batch_index",</div><div class="line">         "ns" : "clearing.fee_detail"</div><div class="line">     &#125;,</div><div class="line">     &#123;</div><div class="line">         "v" : 2,</div><div class="line">         "key" : &#123;</div><div class="line">             "createDate" : 1</div><div class="line">         &#125;,</div><div class="line">         "name" : "createDate_expire_index",</div><div class="line">         "ns" : "clearing.fee_detail",</div><div class="line">         "expireAfterSeconds" : NumberLong(31536000)</div><div class="line">     &#125;</div><div class="line">]</div></pre></td></tr></table></figure><blockquote><p>从上可以看出并没有找到要用到的索引。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>定位到问题之后根据查询条件以及业务需要手动地在该表中给该三个字段添加索引。然后观察日志，查询缓慢的问题得到解决。</p><ul><li>添加索引的脚本</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.fee_detail.ensureIndex(&#123;account: 1, interface_path: 1, smartOrderId:1&#125;);</div></pre></td></tr></table></figure><h2 id="方案优化"><a href="#方案优化" class="headerlink" title="方案优化"></a>方案优化</h2><ul><li>待考量的三种方案</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.account,interface_path,smartOrderId;account,interface_path,batch 两个复合索引</div><div class="line">2.account,interface_path;batch;smartOrderId 三个索引</div><div class="line">3.account;interface_path 两个索引</div></pre></td></tr></table></figure><h2 id="方案跟踪"><a href="#方案跟踪" class="headerlink" title="方案跟踪"></a>方案跟踪</h2><ul><li>方案一:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db.fee_detail.ensureIndex(&#123;account: 1, interface_path: 1, smartOrderId:1&#125;);</div><div class="line">db.fee_detail.ensureIndex(&#123;account: 1, interface_path: 1, batch:1&#125;);</div></pre></td></tr></table></figure><ul><li>方案二</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.fee_detail.ensureIndex(&#123;account: 1, interface_path: 1&#125;);</div><div class="line">db.fee_detail.ensureIndex(&#123;batch:1&#125;);</div><div class="line">db.fee_detail.ensureIndex(&#123;smartOrderId:1&#125;);</div></pre></td></tr></table></figure><ul><li>方案三：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db.fee_detail.ensureIndex(&#123;account:1&#125;);</div><div class="line">db.fee_detail.ensureIndex(&#123;interface_path:1&#125;);</div></pre></td></tr></table></figure><ul><li>测试步骤</li></ul><hr><ol><li>准备mongo存量数据,分别100W,500W,1000W。</li><li>并发请求接口，造４要素的数据确保４要素不会重复，这样每次都会调用第三方不走缓存＝＞每次都会insert和update mongo库。</li><li>获取系统的日志记录的插入mongo库和更新mongo库的时间解析，计算插入和更新mongo库的平均响应时间。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">        　　com.unionpaysmart.goblin.service.MongoService[<span class="number">83</span>]:middleware_opt|mongo|<span class="number">5573</span>|success|插入mongo 成功日志=&gt;<span class="number">5573</span></div></pre></td></tr></table></figure><hr><ul><li>比较结果见下图</li></ul><p><img src="/ITWO/assets/mongo-data.png" alt="mongo 执行比较"></p><h2 id="进一步跟踪"><a href="#进一步跟踪" class="headerlink" title="进一步跟踪"></a>进一步跟踪</h2><blockquote><p>既然第二种和第三种查询速率不分伯仲，望再帮忙看下，这两种分别建立的索引占的空间大小。<br>命令如下:</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db.sys_request_info.stats(1024*1024)</div><div class="line">查看totalIndexSize的大小 单位是M</div></pre></td></tr></table></figure><ul><li>结果如下:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">２种方案创建的索引大小如下，请参考：</div><div class="line"></div><div class="line">方案一:</div><div class="line">db.fee_detail.ensureIndex(&#123;account: 1, interface_path: 1, smartOrderId:1&#125;);</div><div class="line">db.fee_detail.ensureIndex(&#123;account: 1, interface_path: 1, batch:1&#125;);</div><div class="line"><span class="meta">PRIMARY&gt;</span><span class="bash">  db.fee_detail.stats(1024*1024)</span></div><div class="line">&#123;</div><div class="line">"totalIndexSize" : 2100,</div><div class="line">"indexSizes" : &#123;</div><div class="line">"_id_" : 573,</div><div class="line">"createDate_expire_index" : 492,</div><div class="line">"account_1_interface_path_1_smartOrderId_1" : 648,</div><div class="line">"account_1_interface_path_1_batch_1" : 386</div><div class="line">&#125;,</div><div class="line">"ok" : 1</div><div class="line">&#125;</div><div class="line"></div><div class="line">方案二:</div><div class="line">db.fee_detail.ensureIndex(&#123;account: 1, interface_path: 1&#125;);</div><div class="line">db.fee_detail.ensureIndex(&#123;batch:1&#125;);</div><div class="line">db.fee_detail.ensureIndex(&#123;smartOrderId:1&#125;);</div><div class="line"><span class="meta">PRIMARY&gt;</span><span class="bash">  db.fee_detail.stats(1024*1024)</span></div><div class="line">&#123;</div><div class="line">"totalIndexSize" : 2145,</div><div class="line">"indexSizes" : &#123;</div><div class="line">"_id_" : 573,</div><div class="line">"createDate_expire_index" : 492,</div><div class="line">"account_1_interface_path_1" : 267,</div><div class="line">"batch_1" : 277,</div><div class="line">"smartOrderId_1" : 535</div><div class="line">&#125;,</div><div class="line">"ok" : 1</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;现象描述&quot;&gt;&lt;a href=&quot;#现象描述&quot; class=&quot;headerlink&quot; title=&quot;现象描述&quot;&gt;&lt;/a&gt;现象描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;日志监控系统提示mongo查询耗时过长，提示信息如下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;【app】银联智惠监控中心&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;项目: goblin#01-&amp;gt;mongo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;主机: lrma02&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;时间: 2019-02-27 15:30:00&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;详情: mongo响应时间超过阈值,1分钟内响应时间超过1000ms占比大于10.0%,当前占比:12.20%,总请求次数:164&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="mongo" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/mongo/"/>
    
      <category term="explain" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/explain/"/>
    
  </entry>
  
  <entry>
    <title>通过shell来实现任务状态汇报</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2019/05/29/%E9%80%9A%E8%BF%87shell%E6%9D%A5%E5%AE%9E%E7%8E%B0%E4%BB%BB%E5%8A%A1%E7%8A%B6%E6%80%81%E6%B1%87%E6%8A%A5/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2019/05/29/通过shell来实现任务状态汇报/</id>
    <published>2019-05-29T07:19:41.481Z</published>
    <updated>2019-02-19T03:36:54.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h2><blockquote><p>三台机器负责接受分发的数据然后运行各自的逻辑，完成之后发送信号给主节点，然后继续后续的数据分发以及跑批任务。</p></blockquote><a id="more"></a><h2 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h2><blockquote><p>如果是传统的java/python程序去处理的话可以考虑到和zookeeper结合利用zk的心跳机制完成任务的定时上报和任务完成信号的汇报，shell的话怎么办？</p></blockquote><ul><li>思路：在主节点配置一个监听服务器等待接受任务节点的信号，并定时轮训接受信号的文件当第一批次的任务信号接受完成，置空该信号文件并继续分发下一次批次数据给任务节点，依次类推。</li></ul><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"></div><div class="line"></div><div class="line">master:</div><div class="line">nohup  nc -l -k 10000 &gt;signalFile &amp;</div><div class="line"></div><div class="line"><span class="function"><span class="title">monitorDataNode</span></span>()&#123;</div><div class="line">  susseedCnt=`grep <span class="variable">$1</span> signalFile |wc -l`</div><div class="line">  <span class="built_in">return</span> susseedCnt</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">hive -f get_inner.sql</div><div class="line"><span class="keyword">if</span> [ $? != 0 ];</div><div class="line"><span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"get_inner failed"</span></div><div class="line"><span class="built_in">exit</span> 2</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"get_inner succeed"</span></div><div class="line">  hive -f stanard_inner.sh</div><div class="line">  <span class="keyword">if</span> [ $? != 0 ];</div><div class="line">  <span class="keyword">then</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"stanard_inner failed"</span></div><div class="line">  <span class="built_in">exit</span> 2</div><div class="line">  <span class="keyword">else</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"stanard_inner succeed"</span></div><div class="line">    hive -f merge_inner.sql &amp;&amp; bash  deal_out.sh</div><div class="line">    <span class="keyword">if</span> [ $? != 0 ];</div><div class="line">      <span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"merge_inner &amp;&amp; deal_out failed"</span></div><div class="line">          <span class="built_in">exit</span> 2</div><div class="line">    <span class="keyword">else</span></div><div class="line">      <span class="built_in">echo</span> <span class="string">"merge_inner &amp;&amp; deal_out succeed"</span></div><div class="line">      monitorDataNode 0_do_get</div><div class="line">      <span class="keyword">if</span> [ $? == 3 ];</div><div class="line">        <span class="keyword">then</span></div><div class="line">          <span class="built_in">echo</span> <span class="string">'0_do_get succeed'</span></div><div class="line">          bash  1_do_reindex.sh</div><div class="line">          .</div><div class="line">          .</div><div class="line">          .</div><div class="line">      <span class="keyword">else</span></div><div class="line">        monitorDataNode 0_do_get</div><div class="line">      <span class="keyword">fi</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">  <span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">dataNode:</div><div class="line"></div><div class="line">bash  0_do_get.sh</div><div class="line"><span class="keyword">if</span> [ $? != 0 ];</div><div class="line">     <span class="keyword">then</span></div><div class="line">         <span class="built_in">echo</span> <span class="string">"0_do_get failed"</span></div><div class="line">          <span class="built_in">exit</span> 2</div><div class="line"><span class="keyword">else</span></div><div class="line">   <span class="built_in">echo</span> <span class="string">"0_do_get succeed"</span> |  netcat master 10000</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;业务背景&quot;&gt;&lt;a href=&quot;#业务背景&quot; class=&quot;headerlink&quot; title=&quot;业务背景&quot;&gt;&lt;/a&gt;业务背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;三台机器负责接受分发的数据然后运行各自的逻辑，完成之后发送信号给主节点，然后继续后续的数据分发以及跑批任务。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/shell/"/>
    
      <category term="netcat" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/netcat/"/>
    
  </entry>
  
  <entry>
    <title>docker use</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2019/01/15/docker-use/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2019/01/15/docker-use/</id>
    <published>2019-01-15T11:16:06.000Z</published>
    <updated>2019-01-16T01:38:37.230Z</updated>
    
    <content type="html"><![CDATA[<hr><p>docker的使用总结</p><hr><a id="more"></a><ul><li>指定镜像启动容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker run -P tomcat //随机端口访问 将tomcat容器的8080端口映射到宿主机的随机端口</div><div class="line">docker run -p 80:8080 tomcat //指定端口访问 将tomcat容器的8080端口映射到宿主机的80端口</div></pre></td></tr></table></figure><ul><li>编辑正在访问的容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker exec -it CONTAINER ID bash //进入容器的命令行式交互式界面</div></pre></td></tr></table></figure><ul><li>停止正在运行的容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker kill cid/cname</div><div class="line">docker stop cid/cname</div></pre></td></tr></table></figure><ul><li>继承并定制化自己风格的容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mkdir empty</div><div class="line">cd empty</div><div class="line">vi Dockerfile</div><div class="line">FROM tomcat</div><div class="line">RUN echo '&lt;h1&gt;Hello, Docker!&lt;/h1&gt;' &gt; /usr/local/tomcat/webapps/ROOT/index.jsp</div><div class="line"></div><div class="line">docker build -t tomcat:hello .</div><div class="line"></div><div class="line">~/docker/testDocker$ docker images</div><div class="line">REPOSITORY   TAG                 IMAGE ID            CREATED              SIZE</div><div class="line">tomcat       hello               a5ed8e716cce        About a minute ago   462MB</div></pre></td></tr></table></figure><ul><li>本地文件打包部署到容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TODO</div></pre></td></tr></table></figure><ul><li>清除掉归档状态的容器(status=Exited)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker container prune //删除全部</div><div class="line">docker rm cid/cname //删除指定的容器</div></pre></td></tr></table></figure><ul><li>使用数据卷实现宿主项目挂载到容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -p 8081:8080  -v /home/user/docker/testDocker/vtest:/usr/local/tomcat/webapps/ROOT --name tomcat2 -d tomcat</div></pre></td></tr></table></figure><ul><li>部署mysql指定版本容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker run -p 3306:3306 --name mysql \</div><div class="line">-v $PWD/conf:/etc/mysql/conf.d \</div><div class="line">-v $PWD/logs:/logs \</div><div class="line">-v $PWD/data:/var/lib/mysql \</div><div class="line">-e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7.22</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;docker的使用总结&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>数据特殊join</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2019/01/03/%E6%95%B0%E6%8D%AE%E7%89%B9%E6%AE%8Ajoin/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2019/01/03/数据特殊join/</id>
    <published>2019-01-03T12:05:06.000Z</published>
    <updated>2019-01-03T12:53:16.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h2><blockquote><p>有两份计费数据一份是测试账号的，一份是正式账号，现计费策略如下：</p></blockquote><ul><li>测试账号调用过的key如果在正式账号调用记录中出现:<ol><li>测试账号调用该key的次数大于等于正式账号，则计费次数为测试出现的次数减去正式账号出现该key的次数。</li><li>测试账号调用该key的次数如果小于正式账号，则计费次数为正式账号调用的次数。</li></ol></li><li>测试账号和正式账号的没有重复的则分别计费即可。</li></ul><a id="more"></a><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ul><li>相同部分不好计费，需要特殊计费通过Python来实现。</li><li>不同部分通过awk追加到一个文件中，然后使用sort|uniq -c 来统计词频即可。（此处不能使用comm，使用该命令一定要先排序去重，那计费数据不就丢了？）</li></ul><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">step1:compute the key cnt with tag</div><div class="line"></div><div class="line">sort Tcard &gt; s_tcard</div><div class="line">sort Fcard &gt; s_fcard</div><div class="line"></div><div class="line">cat s_tcard|uniq -c |awk -F' ' '&#123;print $2"\tT_"$1&#125;' &gt;tag_tcard</div><div class="line">cat s_fcard|uniq -c |awk -F' ' '&#123;print $2"\tF_"$1&#125;' &gt;tag_Fcard</div><div class="line"></div><div class="line"></div><div class="line">step2: handle the common part</div><div class="line"></div><div class="line">sort tag* |python handleCnt.py &gt;common.tsv</div><div class="line"></div><div class="line"></div><div class="line">step3:handle the diff part</div><div class="line"></div><div class="line"></div><div class="line">awk  'NR==FNR&#123;a[$0]&#125;NR&gt;FNR&#123; if(!($1 in a)) print $0&#125;' s_tcard s_fcard &gt;diff_temp</div><div class="line">awk  'NR==FNR&#123;a[$0]&#125;NR&gt;FNR&#123; if(!($1 in a)) print $0&#125;' s_fcard s_tcard &gt;&gt; diff_temp</div><div class="line"></div><div class="line"></div><div class="line">sort diff_temp |uniq -c |awk -F' ' '&#123;print $2"\t"$1&#125;' &gt;diff.tsv</div><div class="line"></div><div class="line"></div><div class="line">step4:cat comm and diff to final.tsv</div><div class="line"></div><div class="line">cat common.tsv diff.tsv &gt;final.tsv</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># vim: set fileencoding=utf-8</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(separator = <span class="string">'\t'</span>)</span>:</span></div><div class="line">    initDict = &#123;&#125;</div><div class="line">    card = <span class="keyword">None</span></div><div class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> sys.stdin:</div><div class="line">        detail = data.strip().split(separator)</div><div class="line">        <span class="keyword">if</span>(detail[<span class="number">1</span>].startswith(<span class="string">"F"</span>)):</div><div class="line">            card = detail[<span class="number">0</span>]</div><div class="line">            cnt = detail[<span class="number">1</span>].split(<span class="string">"_"</span>)[<span class="number">1</span>]</div><div class="line">            initDict[card] = cnt</div><div class="line">        <span class="keyword">elif</span>(detail[<span class="number">0</span>] <span class="keyword">in</span>  initDict.keys() <span class="keyword">and</span> detail[<span class="number">1</span>].startswith(<span class="string">"T_"</span>)):</div><div class="line">            cnt =  detail[<span class="number">1</span>].split(<span class="string">"_"</span>,<span class="number">1</span>)[<span class="number">1</span>]</div><div class="line">            <span class="keyword">if</span>(initDict[card]&gt;=cnt):</div><div class="line">                <span class="keyword">print</span> card+separator+initDict[card]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">print</span> card+separator+str(int(cnt)-int(initDict[card]))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求背景&quot;&gt;&lt;a href=&quot;#需求背景&quot; class=&quot;headerlink&quot; title=&quot;需求背景&quot;&gt;&lt;/a&gt;需求背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;有两份计费数据一份是测试账号的，一份是正式账号，现计费策略如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;测试账号调用过的key如果在正式账号调用记录中出现:&lt;ol&gt;
&lt;li&gt;测试账号调用该key的次数大于等于正式账号，则计费次数为测试出现的次数减去正式账号出现该key的次数。&lt;/li&gt;
&lt;li&gt;测试账号调用该key的次数如果小于正式账号，则计费次数为正式账号调用的次数。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;测试账号和正式账号的没有重复的则分别计费即可。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/shell/"/>
    
      <category term="python" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/python/"/>
    
      <category term="comm" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/comm/"/>
    
  </entry>
  
  <entry>
    <title>python中-1的妙用</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2018/11/12/python%E4%B8%AD-1%E7%9A%84%E5%A6%99%E7%94%A8/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2018/11/12/python中-1的妙用/</id>
    <published>2018-11-12T02:19:55.000Z</published>
    <updated>2018-11-12T07:39:51.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用背景"><a href="#使用背景" class="headerlink" title="使用背景"></a>使用背景</h2><blockquote><p>在浏览HadoopStreaming官网时，有看到如下的用法也可以实现截取一行的数据。</p></blockquote><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateLongCountToken</span><span class="params">(id)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"LongValueSum:"</span> + id + <span class="string">"\t"</span> + <span class="string">"1"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></div><div class="line">    line = sys.stdin.readline();</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">while</span> line:</div><div class="line">            line = line[:<span class="number">-1</span>];</div><div class="line">            fields = line.split(<span class="string">"\t"</span>);</div><div class="line">            <span class="keyword">print</span> generateLongCountToken(fields[<span class="number">0</span>]);</div><div class="line">            line = sys.stdin.readline();</div><div class="line">    <span class="keyword">except</span> <span class="string">"end of file"</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">     main(sys.argv)</div></pre></td></tr></table></figure><h2 id="调研过程"><a href="#调研过程" class="headerlink" title="调研过程"></a>调研过程</h2><blockquote><p>很好奇这样的用法作用与字符串会有什么效果，就有了如下的调研。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</div><div class="line"><span class="keyword">print</span> line</div><div class="line"><span class="keyword">print</span> line[:<span class="number">-1</span>]</div><div class="line"><span class="keyword">print</span> line.strip()</div><div class="line"></div><div class="line">a = <span class="string">'   '</span></div><div class="line"><span class="keyword">print</span> len(a)</div><div class="line"><span class="keyword">print</span> len(a[:<span class="number">-1</span>])</div><div class="line"><span class="keyword">print</span> len(a.strip())</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">main()</div></pre></td></tr></table></figure><ul><li>输出如下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1,2,3,4</div><div class="line"></div><div class="line">1,2,3,4</div><div class="line">1,2,3,4</div><div class="line">3</div><div class="line">2</div><div class="line">0</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>从上可以得出如下的结论：</p></blockquote><ol><li>-1可以去除数据行后面的换行符或者最后的空格或者tab等单个字符</li><li>但是不可以去除多个空格或者多个无用字符</li><li>此类的场景还是推荐使用strip()来保证万无一失,当然在获得完整的一行的数据的场景,该用法完全够用。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用背景&quot;&gt;&lt;a href=&quot;#使用背景&quot; class=&quot;headerlink&quot; title=&quot;使用背景&quot;&gt;&lt;/a&gt;使用背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在浏览HadoopStreaming官网时，有看到如下的用法也可以实现截取一行的数据。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/python/"/>
    
      <category term="strip" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/strip/"/>
    
  </entry>
  
  <entry>
    <title>linux 下怎么使用命令制作U盘启动盘</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2018/10/24/linux-%E4%B8%8B%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E5%88%B6%E4%BD%9CU%E7%9B%98%E5%90%AF%E5%8A%A8%E7%9B%98/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2018/10/24/linux-下怎么使用命令制作U盘启动盘/</id>
    <published>2018-10-24T05:27:07.000Z</published>
    <updated>2018-10-25T01:41:31.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用背景"><a href="#使用背景" class="headerlink" title="使用背景"></a>使用背景</h2><blockquote><p>ubantu自带的工具没有响应,后来查到可以使用命令的方式来格式化u盘和制作装机盘.</p></blockquote><a id="more"></a><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">unmout the mount pan</span></div><div class="line">sudo umount /dev/sdb</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">format u pan</span></div><div class="line">sudo mkfs.vfat /dev/sdb –I</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">make u pan to a pan <span class="built_in">which</span> can play as a bootpan</span></div><div class="line">sudo dd if=~/iso/deepin-15.7-amd64.iso of=/dev/sdb</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用背景&quot;&gt;&lt;a href=&quot;#使用背景&quot; class=&quot;headerlink&quot; title=&quot;使用背景&quot;&gt;&lt;/a&gt;使用背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ubantu自带的工具没有响应,后来查到可以使用命令的方式来格式化u盘和制作装机盘.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ssh 免密码登录以及多种用途共存</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2018/10/12/ssh-%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E4%BB%A5%E5%8F%8A%E5%A4%9A%E7%A7%8D%E7%94%A8%E9%80%94%E5%85%B1%E5%AD%98/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2018/10/12/ssh-免密码登录以及多种用途共存/</id>
    <published>2018-10-12T08:51:58.000Z</published>
    <updated>2018-10-12T09:44:12.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用背景"><a href="#使用背景" class="headerlink" title="使用背景"></a>使用背景</h2><blockquote><p>在日常使用ssh时,我们有以下几种使用场景</p></blockquote><ol><li>ssh 远程登录远端的机器</li><li>scp 与其他的主机 上传或者下载数据</li><li>ssh 生成邮箱的公钥用于免密拉取git的项目</li></ol><a id="more"></a><h2 id="实现和原理分析"><a href="#实现和原理分析" class="headerlink" title="实现和原理分析"></a>实现和原理分析</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">（1）在HOSTA机器上产生公钥和私钥</div><div class="line">   ssh-keygen -t rsa</div><div class="line">   </div><div class="line">（2）需要将HOSTA机器的公钥复制给HOSTB机器</div><div class="line">  ssh-copy-id -i .ssh/id_rsa.pub root@HOSTB</div></pre></td></tr></table></figure><ul><li>图解</li></ul><p><img src="/ITWO/assets/ssh-rsa.png" alt="详细交互过程"></p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><blockquote><p>既然ssh生成的公钥可以用来这么多用途,那么怎样让用于免密码登录/拷贝的公钥和用来拉取git项目的公钥共存呢?</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> man ssh-add</span></div><div class="line">NAME</div><div class="line">     ssh-add — adds private key identities to the authentication agent</div><div class="line">     ssh-add adds private key identities to the authentication agent, ssh-agent(1).  When run</div><div class="line">     without arguments, it adds the files ~/.ssh/id_rsa, ~/.ssh/id_dsa, ~/.ssh/id_ecdsa,</div><div class="line">     ~/.ssh/id_ed25519 and ~/.ssh/identity.  After loading a private key, ssh-add will try to load</div><div class="line">     corresponding certificate information from the filename obtained by appending -cert.pub to</div><div class="line">     the name of the private key file.  Alternative file names can be given on the command line.</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 从以上的解释可以看出通过该命令可以解决此问题</span></div><div class="line">ssh-add ~/.ssh/*_rsa</div></pre></td></tr></table></figure><ul><li>ssh-add操作<br><img src="/ITWO/assets/ssh-add.png" alt="ssh-add 操作过程"></li></ul><ul><li>过程测试<br><img src="/ITWO/assets/ssh-git.png" alt="ssh-add 操作过程"></li></ul><blockquote><p>ps: 用作一种用途时,生成id_rsa和id_rsa.pub之后记得重命名,然后使用ssh-add添加该密钥.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用背景&quot;&gt;&lt;a href=&quot;#使用背景&quot; class=&quot;headerlink&quot; title=&quot;使用背景&quot;&gt;&lt;/a&gt;使用背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在日常使用ssh时,我们有以下几种使用场景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;ssh 远程登录远端的机器&lt;/li&gt;
&lt;li&gt;scp 与其他的主机 上传或者下载数据&lt;/li&gt;
&lt;li&gt;ssh 生成邮箱的公钥用于免密拉取git的项目&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/git/"/>
    
      <category term="ssh" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/ssh/"/>
    
      <category term="scp" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/scp/"/>
    
  </entry>
  
  <entry>
    <title>ubantu unzip或手动解压文件乱码</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2018/10/08/ubantu-unzip%E6%88%96%E6%89%8B%E5%8A%A8%E8%A7%A3%E5%8E%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2018/10/08/ubantu-unzip或手动解压文件乱码/</id>
    <published>2018-10-08T03:19:02.000Z</published>
    <updated>2018-10-12T08:37:53.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用背景"><a href="#使用背景" class="headerlink" title="使用背景"></a>使用背景</h2><blockquote><p>从云盘下载的zip包中包含中文,解压出来的文件夹和文件均是乱码.<br><img src="/ITWO/assets/unziperror.png" alt="中文乱码"></p></blockquote><a id="more"></a><hr><h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><p><img src="/ITWO/assets/ziphelp.png" alt="查看unzip的帮助命令"></p><blockquote><p>得到 -O 可以使用 windows或者dos的编码格式去解压文件.</p></blockquote><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unzip -O GBK 笔记.zip</div></pre></td></tr></table></figure><p><img src="/ITWO/assets/unzipsuccess.png" alt="解压的时候已经没有乱码了"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用背景&quot;&gt;&lt;a href=&quot;#使用背景&quot; class=&quot;headerlink&quot; title=&quot;使用背景&quot;&gt;&lt;/a&gt;使用背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;从云盘下载的zip包中包含中文,解压出来的文件夹和文件均是乱码.&lt;br&gt;&lt;img src=&quot;/ITWO/assets/unziperror.png&quot; alt=&quot;中文乱码&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="ubantu" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/ubantu/"/>
    
      <category term="unzip" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/unzip/"/>
    
      <category term="乱码" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/%E4%B9%B1%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>java mr lzo 支持</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2018/09/13/java-mr-lzo-%E6%94%AF%E6%8C%81/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2018/09/13/java-mr-lzo-支持/</id>
    <published>2018-09-13T03:08:56.000Z</published>
    <updated>2018-09-13T03:15:08.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景描述"><a href="#背景描述" class="headerlink" title="背景描述"></a>背景描述</h2><blockquote><p>lzo格式有很大的压缩比,相对于Hdfs文件而言有很大优势,支持分片,默认是不支持splitable的，需要为其添加索引文件，才能支持多个map并行对lzo文件进行处理.先阶段来说为了节约存储空间,lzo格式的文件存储随处可见,所以在mapreduce中怎么读取和存储lzo文件就很有必要了解下.</p></blockquote><a id="more"></a><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><blockquote><p>如果希望mr输出的是lzo格式的文件，添加下面的语句</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">FileOutputFormat.setCompressOutput(job, <span class="keyword">true</span>);</div><div class="line">FileOutputFormat.setOutputCompressorClass(job, LzopCodec.class);</div><div class="line"><span class="keyword">int</span> result = job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>;</div><div class="line"><span class="comment">//上面的语句执行完成后，会生成最后的输出文件，需要在此基础上添加lzo的索引</span></div><div class="line">LzoIndexer lzoIndexer = <span class="keyword">new</span> LzoIndexer(conf);</div><div class="line">lzoIndexer.index(<span class="keyword">new</span> Path(args[<span class="number">1</span>]));</div></pre></td></tr></table></figure><blockquote><p>如果已经存在lzo文件，但没有添加索引，可以采用下面的方法，在输入路径的文件上上添加lzo索引<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hadoop jar $HADOOP_HOME/lib/hadoop-lzo-0.4.17.jar com.hadoop.compression.lzo.LzoIndexer hdf://inputpath</div></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景描述&quot;&gt;&lt;a href=&quot;#背景描述&quot; class=&quot;headerlink&quot; title=&quot;背景描述&quot;&gt;&lt;/a&gt;背景描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;lzo格式有很大的压缩比,相对于Hdfs文件而言有很大优势,支持分片,默认是不支持splitable的，需要为其添加索引文件，才能支持多个map并行对lzo文件进行处理.先阶段来说为了节约存储空间,lzo格式的文件存储随处可见,所以在mapreduce中怎么读取和存储lzo文件就很有必要了解下.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="mapreduce" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/mapreduce/"/>
    
      <category term="java" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/java/"/>
    
      <category term="lzo" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/lzo/"/>
    
  </entry>
  
  <entry>
    <title>scala 使用遇到的问题</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2018/09/13/scala-match-%E4%BD%BF%E7%94%A8%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2018/09/13/scala-match-使用遇到的问题/</id>
    <published>2018-09-13T02:45:29.000Z</published>
    <updated>2018-09-26T01:55:18.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用背景"><a href="#使用背景" class="headerlink" title="使用背景"></a>使用背景</h2><blockquote><p>在使用spark来跑统计报告任务是,有使用scala,会遇到如下的问题.</p></blockquote><a id="more"></a><p>+用多个开关去控制不同的使用逻辑</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> dimensionCode = args(<span class="number">2</span>).toInt</div><div class="line">dimensionCode <span class="keyword">match</span> &#123;</div><div class="line"> <span class="keyword">case</span> <span class="type">AnalysisDimension</span>.<span class="type">D0</span>.getCode =&gt; &#123;</div><div class="line">   println(<span class="string">"正在生成报告的维度为"</span>, <span class="type">AnalysisDimension</span>.<span class="type">D0</span>.getDimensions)</div><div class="line">   <span class="comment">//  D0(0, "行业大类,行业小类")</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure><ul><li>报错</li></ul><blockquote><p> 如上的用法会出现以下的错误：</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="type">Error</span>:(<span class="number">38</span>, <span class="number">33</span>) stable identifier required, but <span class="type">D0</span>.getCode found.</div><div class="line">    <span class="keyword">case</span> <span class="type">AnalysisDimension</span>.<span class="type">D0</span>.getCode =&gt; &#123;</div></pre></td></tr></table></figure><blockquote><p>必须要使用常量</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p> 改动成如下的表达式就可以通过：</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dimensionCode.toString.toInt <span class="keyword">match</span> &#123;</div><div class="line">  <span class="keyword">case</span> dimensionCode <span class="keyword">if</span> <span class="type">AnalysisDimension</span>.<span class="type">D0</span>.getCode == dimensionCode =&gt; &#123;</div><div class="line">    println(<span class="string">"正在生成报告的维度为:"</span>, <span class="type">AnalysisDimension</span>.<span class="type">D0</span>.getDimensions)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用背景&quot;&gt;&lt;a href=&quot;#使用背景&quot; class=&quot;headerlink&quot; title=&quot;使用背景&quot;&gt;&lt;/a&gt;使用背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在使用spark来跑统计报告任务是,有使用scala,会遇到如下的问题.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="scala" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/scala/"/>
    
      <category term="match" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/match/"/>
    
  </entry>
  
  <entry>
    <title>java/scala 怎么给可变参数传值</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2018/09/07/java-scala-%E6%80%8E%E4%B9%88%E7%BB%99%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E4%BC%A0%E5%80%BC/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2018/09/07/java-scala-怎么给可变参数传值/</id>
    <published>2018-09-07T10:06:55.000Z</published>
    <updated>2018-09-07T10:12:36.626Z</updated>
    
    <content type="html"><![CDATA[<h2 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h2><blockquote><p>java和scala 分别怎么给可变参数传值?</p></blockquote><a id="more"></a><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><ul><li>java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">String[] args = <span class="string">"1,2,3"</span>.split(<span class="string">","</span>, -<span class="number">1</span>)</div><div class="line">testString(args);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testString</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">      <span class="keyword">for</span> (String arg : args) &#123;</div><div class="line">          System.out.println(arg);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><ul><li>scala</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line"></div><div class="line">  <span class="keyword">val</span> test = <span class="string">"1,2,3,4"</span>.split(<span class="string">","</span>)</div><div class="line"></div><div class="line">  testArgs(test: _*)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">testArgs</span></span>(paths: <span class="type">String</span>*) = &#123;</div><div class="line">  paths.foreach(println(_))</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;业务背景&quot;&gt;&lt;a href=&quot;#业务背景&quot; class=&quot;headerlink&quot; title=&quot;业务背景&quot;&gt;&lt;/a&gt;业务背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;java和scala 分别怎么给可变参数传值?&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/java/"/>
    
      <category term="scala" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/scala/"/>
    
      <category term="string*" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/string/"/>
    
      <category term="string..." scheme="http://www.tangyuxiaoyao.club/ITWO/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>使用elasticSearch 实现商户名称的模糊匹配</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2018/09/07/%E4%BD%BF%E7%94%A8elasticSearch-%E5%AE%9E%E7%8E%B0%E5%95%86%E6%88%B7%E5%90%8D%E7%A7%B0%E7%9A%84%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2018/09/07/使用elasticSearch-实现商户名称的模糊匹配/</id>
    <published>2018-09-07T07:33:04.000Z</published>
    <updated>2018-12-26T02:36:03.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h2><blockquote><p>总公司那边不允许输出流水中的刷卡地址,所以应对的方案是允许客户输入商户的关键字然后模糊匹配刷卡地址中是否存在</p></blockquote><a id="more"></a><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><blockquote><p>先从数据量着手选择技术,mysql 通过like来匹配肯定不能满足如此大的数据量,存量数据量来看已经有六千万之多,所以mysql技术不行,而且mysql仅仅是解决了包含的匹配关系,对于关键词和查询词组的相关度支持有限,另一方面考虑到数据的复用行,另一项目中数据已经存于es中.</p></blockquote><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><blockquote><p>开始之初,选择的是已经做好IK 分词的刷卡地址,但是无论使用wildcardQuery还是fuzzyQuery亦或prefixQuery热词还好,但是出现了冷门词语(是否包含与既定的分词包中),就会出现某个汉字多排名就考前的弊病,而且默认返回十条,这样就限制了包含模糊查询的二次匹配,次路不通.<br>后来鉴于上文提及的已做好分词命中不固定的原因,选择增加一个字段数据导入的时候不做分词(keyword)</p></blockquote><ul><li>知识点<blockquote><p>5.x以上已经没有string类型。如果需要分词的话使用text，不需要分词使用keyword。但是生成索引的时候你会看到后面还有一个关键词:index,默认为true,如果设置为false,该字段将不能被索引,keyword是整个文档被索引,text根据指定的分词器被索引(不指定的话默认的分词器是standard),<br>keyword,index:true=&gt;doc被每个term切词并与doc建立索引，可以用于模糊匹配， keyword,index:fals则doc不被切词，所以你要做的就是要么使用keyword,index:true的字段模糊匹配或者使用text类型的字段的全文检索匹配过滤，然后这些不被切词（查询项（二次查找（schame）））和被切词的字段作为查询项返回.<br>使用了keyword和index:false,该字段只能是作为查询项来返回,用法如下:</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">MatchQueryBuilder termQueryBuilder = QueryBuilders.</div><div class="line">matchQuery(<span class="string">"content"</span>, <span class="string">"中国渔船"</span>).analyzer(<span class="string">"ik_max_word"</span>);</div><div class="line">String indexes = <span class="string">"CP5178,CP5177,CP5176"</span>;</div><div class="line">String[] includesIndexes = indexes.split(<span class="string">","</span>);</div><div class="line">String[] excludesIndexes = <span class="keyword">new</span> String[]&#123;&#125;;</div><div class="line">SearchResponse searchResponse = client.prepareSearch(INDEX).setTypes(TYPE).setQuery(termQueryBuilder)</div><div class="line">.setFetchSource(includesIndexes, excludesIndexes).execute().actionGet();</div></pre></td></tr></table></figure><blockquote><p>综上所述我们需要得到的最终技术实现</p></blockquote><ol><li>使用keyword,index:true配合wildcardQuery实现模糊匹配的查找(like “%key%”)</li><li>使用text字段配合分词器实现长关键词的二次匹配,搜索的关键词越长,关联度越高.</li></ol><ul><li>上代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">String mid = <span class="string">"A4816456E30D07B17C23B8D16FC26CCEC0E7EBE10A7554732A25753EBE533569"</span>;</div><div class="line"> String searchKey = <span class="string">"南通新时代电器科技有限公司"</span>;</div><div class="line"></div><div class="line"> MatchQueryBuilder merId = QueryBuilders.matchQuery(<span class="string">"mid"</span>, mid);</div><div class="line"></div><div class="line"></div><div class="line"> BoolQueryBuilder midMust = QueryBuilders.boolQuery().must(merId);</div><div class="line"></div><div class="line"></div><div class="line"> SearchResponse searchResponse = client.prepareSearch(INDEX).setTypes(TYPE).setQuery(midMust).execute().actionGet();</div><div class="line"></div><div class="line"> SearchHit[] hits = searchResponse.getHits().getHits();</div><div class="line"> String msg = <span class="string">"未找到"</span>;</div><div class="line"></div><div class="line"> <span class="keyword">if</span> (<span class="number">0</span> &lt; hits.length) &#123;</div><div class="line">     WildcardQueryBuilder mchntName = QueryBuilders.wildcardQuery(<span class="string">"name"</span>, <span class="string">"*"</span> + searchKey + <span class="string">"*"</span>);</div><div class="line">     QueryBuilders.prefixQuery()</div><div class="line">     BoolQueryBuilder mchntNameMust = QueryBuilders.boolQuery().must(merId).must(mchntName);</div><div class="line">     searchResponse = client.prepareSearch(INDEX).setTypes(TYPE).setQuery(mchntNameMust).execute().actionGet();</div><div class="line">     hits = searchResponse.getHits().getHits();</div><div class="line">     <span class="keyword">if</span> (<span class="number">0</span> &lt; hits.length) &#123;</div><div class="line">         <span class="keyword">for</span> (SearchHit searchHit : hits) &#123;</div><div class="line">             System.out.println(searchHit.getSourceAsMap().get(<span class="string">"name"</span>));</div><div class="line">         &#125;</div><div class="line">         msg = <span class="string">"匹配成功"</span>;</div><div class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">4</span> &lt; searchKey.length()) &#123;</div><div class="line">         MatchQueryBuilder nameQuery = QueryBuilders.</div><div class="line">                 matchQuery(<span class="string">"name_term"</span>, searchKey).analyzer(<span class="string">"ik_max_word"</span>);</div><div class="line">         BoolQueryBuilder nameMust = QueryBuilders.boolQuery().must(merId).must(nameQuery);</div><div class="line">         searchResponse = client.prepareSearch(INDEX).setTypes(TYPE).setQuery(nameMust).execute().actionGet();</div><div class="line">         hits = searchResponse.getHits().getHits();</div><div class="line">         <span class="keyword">if</span> (<span class="number">0</span> &lt; hits.length) &#123;</div><div class="line">             <span class="keyword">for</span> (SearchHit searchHit : hits) &#123;</div><div class="line">                 System.out.println(searchHit.getSourceAsMap().get(<span class="string">"name_term"</span>));</div><div class="line">             &#125;</div><div class="line">             msg = <span class="string">"匹配成功"</span>;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">     &#125;</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line">     System.out.println(<span class="string">"未匹配到商户名"</span>);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> System.out.println(msg);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求背景&quot;&gt;&lt;a href=&quot;#需求背景&quot; class=&quot;headerlink&quot; title=&quot;需求背景&quot;&gt;&lt;/a&gt;需求背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;总公司那边不允许输出流水中的刷卡地址,所以应对的方案是允许客户输入商户的关键字然后模糊匹配刷卡地址中是否存在&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="es" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/es/"/>
    
      <category term="elasticSearch" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/elasticSearch/"/>
    
      <category term="term" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/term/"/>
    
      <category term="ik" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/ik/"/>
    
  </entry>
  
  <entry>
    <title>java 调用spark-submit填坑</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2018/08/24/java-%E8%B0%83%E7%94%A8spark-submit%E5%A1%AB%E5%9D%91/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2018/08/24/java-调用spark-submit填坑/</id>
    <published>2018-08-24T08:50:31.000Z</published>
    <updated>2018-08-27T09:31:25.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><blockquote><p>在开发过程中遇到了如下的问题:<br>使用shell调用spark-submit提交程序时,不到一分钟跑完所有的流程.<br>但是使用java调用shell进而调用spark-submit就会卡在parttion比较多的步骤,此问题我纠结了四天的时间.<br>可是可的确是弥补了很多知识上的短板.<br>排查过程如下:</p></blockquote><a id="more"></a><h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h2><h3 id="集群问题"><a href="#集群问题" class="headerlink" title="集群问题"></a>集群问题</h3><blockquote><p>首先怀疑的是集群问题,搜索度娘和谷哥有很多人告知是因为内存不够或者是分配给的内核不够,但是此类问题在过滤后台的日志来看是不存在的,</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">426.2 MB of 1 GB physical memory used; 2.2 GB of 2.1 GB virtual memory used</div></pre></td></tr></table></figure><h3 id="代码问题"><a href="#代码问题" class="headerlink" title="代码问题"></a>代码问题</h3><blockquote><p>后来怀疑是代码问题，因为使用python去调用该程序也是没问题的．<br>代码如下:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">runShell</span><span class="params">(String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">    String result = <span class="string">""</span>;</div><div class="line">    Process process = Runtime.getRuntime().exec(command);</div><div class="line">    <span class="comment">// 获取shell返回流</span></div><div class="line">    BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(process.getInputStream());</div><div class="line">    <span class="comment">// 字符流转换字节流</span></div><div class="line">    BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(bufferedInputStream));</div><div class="line"></div><div class="line">    String line;</div><div class="line">    <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>)</div><div class="line">        result = line;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        process.waitFor();</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="comment">// 关闭输入流</span></div><div class="line">        bufferedInputStream.close();</div><div class="line">        bufferedReader.close();</div><div class="line">        process.destroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>首先来解释一下 waitFor() 方法的意义， waitFor() 表示当前 Process 所在的子线程处于等待状态，如有必要，一直要等到由该 Process 对象表示的进程已经终止，官网说如果我们在调用此方法时，如果不注意的话，很容易出现主线程阻塞， Process 也挂起的情况。这就是我遇到的问题.解决办法是，在调用 waitFor() 的时候， Process 需要向主线程汇报运行状况，所以要注意清空缓存区，即 InputStream 和 ErrorStream ，注意这里 InputStream 和 ErrorStream 都需要清空。<br>但是上面的方式只是解决了标准输入流的读取，并且打印最后一行，并没有处理标准错误流，后来经过如下代码的测试，spark-submit提交的日志竟然打印在标准错误流中，所以也就解释了之前为什么会卡在partiion比较多的地方,因为该部分日志较多,达到了缓存区的上限,所以流程不能继续.<br>错误的表象:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Container marked as failed: container_1535013730755_0026_01_000007 on host: rocket04.kylin.com. Exit status: <span class="number">1</span>. Diagnostics: Exception from container-launch.</div><div class="line">Container id: container_1535013730755_0026_01_000007</div><div class="line">Exit code: <span class="number">1</span></div><div class="line">Stack trace: ExitCodeException exitCode=<span class="number">1</span>: </div><div class="line">at org.apache.hadoop.util.Shell.runCommand(Shell.java:<span class="number">601</span>)</div><div class="line">at org.apache.hadoop.util.Shell.run(Shell.java:<span class="number">504</span>)</div><div class="line">at org.apache.hadoop.util.Shell$ShellCommandExecutor.execute(Shell.java:<span class="number">786</span>)</div><div class="line">at org.apache.hadoop.yarn.server.nodemanager.DefaultContainerExecutor.launchContainer(DefaultContainerExecutor.java:<span class="number">213</span>)</div><div class="line">at org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher.ContainerLaunch.call(ContainerLaunch.java:<span class="number">302</span>)</div><div class="line">at org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher.ContainerLaunch.call(ContainerLaunch.java:<span class="number">82</span>)</div><div class="line">at java.util.concurrent.FutureTask.run(FutureTask.java:<span class="number">262</span>)</div><div class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1145</span>)</div><div class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">615</span>)</div><div class="line">at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</div></pre></td></tr></table></figure><blockquote><p>调研的现象如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ERROR&gt;<span class="number">18</span>/<span class="number">08</span>/<span class="number">27</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">59</span> INFO cluster.YarnScheduler: Removed TaskSet <span class="number">4.0</span>, whose tasks have all completed, from pool </div><div class="line">ERROR&gt;<span class="number">18</span>/<span class="number">08</span>/<span class="number">27</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">59</span> INFO scheduler.DAGScheduler: ResultStage <span class="number">4</span> (saveAsTextFile at ReportNatureIncubationCustom.scala:<span class="number">265</span>) finished in <span class="number">0.635</span> s</div><div class="line">ERROR&gt;<span class="number">18</span>/<span class="number">08</span>/<span class="number">27</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">59</span> INFO scheduler.DAGScheduler: Job <span class="number">2</span> finished: saveAsTextFile at ReportNatureIncubationCustom.scala:<span class="number">265</span>, took <span class="number">3.497685</span> s</div><div class="line">ERROR&gt;<span class="number">18</span>/<span class="number">08</span>/<span class="number">27</span> <span class="number">16</span>:<span class="number">13</span>:<span class="number">01</span> INFO spark.SparkContext: <span class="function">Invoking <span class="title">stop</span><span class="params">()</span> from shutdown hook</span></div></pre></td></tr></table></figure></p><p>测试代码:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">niceCallShell</span><span class="params">(String command)</span> </span>&#123;</div><div class="line">       String result = <span class="string">""</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           System.out.println(<span class="string">"cmd start"</span>);</div><div class="line">           Process p = Runtime.getRuntime().exec(command);  <span class="comment">//调用Linux的相关命令</span></div><div class="line">           <span class="keyword">new</span> RunThread(p.getInputStream(), <span class="string">"INFO"</span>).start();</div><div class="line">           <span class="keyword">new</span> RunThread(p.getErrorStream(), <span class="string">"ERROR"</span>).start();</div><div class="line">           <span class="keyword">int</span> value = p.waitFor();</div><div class="line">           <span class="keyword">if</span> (value == <span class="number">0</span>)</div><div class="line">               result = <span class="string">"complete"</span>;</div><div class="line">           <span class="keyword">else</span></div><div class="line">               result = <span class="string">"failed"</span>;</div><div class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> result;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RunThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">       InputStream is;</div><div class="line">       String printType;</div><div class="line"></div><div class="line">       RunThread(InputStream is, String printType) &#123;</div><div class="line">           <span class="keyword">this</span>.is = is;</div><div class="line">           <span class="keyword">this</span>.printType = printType;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(is);</div><div class="line">               BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</div><div class="line">               String line = <span class="keyword">null</span>;</div><div class="line">               <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>)</div><div class="line">                   System.out.println(printType + <span class="string">"&gt;"</span> + line);</div><div class="line">           &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">               ioe.printStackTrace();</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="不改java代码"><a href="#不改java代码" class="headerlink" title="不改java代码"></a>不改java代码</h3><blockquote><p>该解决方案为把spark-submit的日志重定向到一个独立文件中,就不会发生与java交互的Input/Error,方案如下:</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">master yarn-client $deployPath/tourism-data-1.0.jar $&#123;reportId&#125; &gt; spark_cumstom_$&#123;reportId&#125;.log 2&gt;&amp;1</div></pre></td></tr></table></figure><h3 id="改动java代码"><a href="#改动java代码" class="headerlink" title="改动java代码"></a>改动java代码</h3><blockquote><p>这部分实则就是改动下之前的测试代码,将标准输入和标准错误放到不同的线程中,然后分发日志到logback中.</p></blockquote><h3 id="比较与总结"><a href="#比较与总结" class="headerlink" title="比较与总结"></a>比较与总结</h3><blockquote><p>第一种方法相比较与第二种方法而言,对于后期排查问题而言,可以更加直观,可以在shell文件的同级目录下找到所有的执行log,便于排查问题.<br>第二种则需要在系统级别的log中找到需要的信息,比较繁琐,如果数据较大,同时并发度很大,则嵌入的日志很大.但是相比较来说第二种,比较传统,也更接近java 的系统调用的使用习惯.当然也可返回shell调用成功的最后一行的flag,但是不方便排查问题.<br>综上:最终选择了第一种方案.</p></blockquote><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><h3 id="快捷排查"><a href="#快捷排查" class="headerlink" title="快捷排查"></a>快捷排查</h3><blockquote><p>怎么通过自带的UI来定位错误信息已经日志信息，已经各个节点上的日志信息预览？</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn application list</div></pre></td></tr></table></figure><blockquote><p>通过以上的命令进而通过我们设定的应用名称从而定位到Tracking-URL，在保证你本地已配置好数据集群的ip和host配置关系以后，通过该地址可以找到以下界面:</p></blockquote><p><img src="/ITWO/assets/spark-task-ui.png" alt="spark ui "></p><blockquote><p>从下图定位到executor</p></blockquote><p><img src="/ITWO/assets/executors.png" alt="executors"></p><blockquote><p>下图为详细信息</p></blockquote><p><img src="/ITWO/assets/error-log.png" alt="executors"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在开发过程中遇到了如下的问题:&lt;br&gt;使用shell调用spark-submit提交程序时,不到一分钟跑完所有的流程.&lt;br&gt;但是使用java调用shell进而调用spark-submit就会卡在parttion比较多的步骤,此问题我纠结了四天的时间.&lt;br&gt;可是可的确是弥补了很多知识上的短板.&lt;br&gt;排查过程如下:&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/java/"/>
    
      <category term="spark" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/spark/"/>
    
      <category term="submit" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/submit/"/>
    
  </entry>
  
  <entry>
    <title>cron 使用范例</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2018/08/13/cron-%E4%BD%BF%E7%94%A8%E8%8C%83%E4%BE%8B/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2018/08/13/cron-使用范例/</id>
    <published>2018-08-13T07:38:40.000Z</published>
    <updated>2018-08-16T12:34:57.410Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用范例如下：</p></blockquote><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">一个cron表达式有至少6个（也可能7个）有空格分隔的时间元素。</div><div class="line">按顺序依次为 </div><div class="line">秒（0~59） </div><div class="line">分钟（0~59）</div><div class="line">小时（0~23）</div><div class="line">天（月）（0~31，但是你需要考虑你月的天数）</div><div class="line">月（0~11）</div><div class="line">天（星期）（1~7 1=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT）</div><div class="line">7.年份（1970－2099）</div><div class="line">其中每个元素可以是一个值(如6),一个连续区间(9-12),一个间隔时间(8-18/4)(/表示每隔4小时),一个列表(1,3,5),通配符。由于"月份中的日期"和"星期中的日期"这两个元素互斥的,必须要对其中一个设置?.</div><div class="line">0 0 10,14,16 * * ? 每天上午10点，下午2点，4点</div><div class="line">0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时</div><div class="line">0 0 12 ? * WED 表示每个星期三中午12点 </div><div class="line">"0 0 12 * * ?" 每天中午12点触发 </div><div class="line">"0 15 10 ? * *" 每天上午10:15触发 </div><div class="line">"0 15 10 * * ?" 每天上午10:15触发 </div><div class="line">"0 15 10 * * ? *" 每天上午10:15触发 </div><div class="line">"0 15 10 * * ? 2005" 2005年的每天上午10:15触发 </div><div class="line">"0 * 14 * * ?" 在每天下午2点到下午2:59期间的每1分钟触发 </div><div class="line">"0 0/5 14 * * ?" 在每天下午2点到下午2:55期间的每5分钟触发 </div><div class="line">"0 0/5 14,18 * * ?" 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 </div><div class="line">"0 0-5 14 * * ?" 在每天下午2点到下午2:05期间的每1分钟触发 </div><div class="line">"0 10,44 14 ? 3 WED" 每年三月的星期三的下午2:10和2:44触发 </div><div class="line">"0 15 10 ? * MON-FRI" 周一至周五的上午10:15触发 </div><div class="line">"0 15 10 15 * ?" 每月15日上午10:15触发 </div><div class="line">"0 15 10 L * ?" 每月最后一日的上午10:15触发 </div><div class="line">"0 15 10 ? * 6L" 每月的最后一个星期五上午10:15触发 </div><div class="line">"0 15 10 ? * 6L 2002-2005" 2002年至2005年的每月的最后一个星期五上午10:15触发 </div><div class="line">"0 15 10 ? * 6#3" 每月的第三个星期五上午10:15触发</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用范例如下：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="spring,cron" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/spring-cron/"/>
    
  </entry>
  
  <entry>
    <title>spark 聚合进化</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2018/07/27/spark-%E8%81%9A%E5%90%88%E8%BF%9B%E5%8C%96/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2018/07/27/spark-聚合进化/</id>
    <published>2018-07-27T09:33:00.000Z</published>
    <updated>2018-08-24T08:18:05.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2><blockquote><p>通过分析流水，然后统计商户维度的以下字段：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">* 1-交易金额</div><div class="line">* 2-交易笔数,3-交易人数</div><div class="line">* 4-笔单价,5-客单价,6-上午笔数占比</div><div class="line">* 7-午间笔数占比,8-下午笔数占比,9-晚间笔数占比,10-深夜笔数占比</div><div class="line">* （注：上午 00:00-9:59；午间 10:00-12:59；下午 13:00-16:59；晚间 17:00-20:59；深夜 21:00-23:59）</div></pre></td></tr></table></figure><blockquote><p>未完待续</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求描述&quot;&gt;&lt;a href=&quot;#需求描述&quot; class=&quot;headerlink&quot; title=&quot;需求描述&quot;&gt;&lt;/a&gt;需求描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;通过分析流水，然后统计商户维度的以下字段：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure c
      
    
    </summary>
    
    
      <category term="spark" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/spark/"/>
    
      <category term="agg" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/agg/"/>
    
      <category term="sql" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/sql/"/>
    
      <category term="pivot" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/pivot/"/>
    
  </entry>
  
  <entry>
    <title>使用hive/mapreduce给大数据全局排序，同时巧用该方法实现hbase的预分区</title>
    <link href="http://www.tangyuxiaoyao.club/ITWO/2018/07/18/%E4%BD%BF%E7%94%A8hive-mapreduce%E7%BB%99%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%A8%E5%B1%80%E6%8E%92%E5%BA%8F%EF%BC%8C%E5%90%8C%E6%97%B6%E5%B7%A7%E7%94%A8%E8%AF%A5%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0hbase%E7%9A%84%E9%A2%84%E5%88%86%E5%8C%BA/"/>
    <id>http://www.tangyuxiaoyao.club/ITWO/2018/07/18/使用hive-mapreduce给大数据全局排序，同时巧用该方法实现hbase的预分区/</id>
    <published>2018-07-18T01:50:44.000Z</published>
    <updated>2018-07-19T08:22:12.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>完成排序，打行号，然后根据分位数找到分界点。</p></blockquote><a id="more"></a><h2 id="hive篇"><a href="#hive篇" class="headerlink" title="hive篇"></a>hive篇</h2><h3 id="造测试数据"><a href="#造测试数据" class="headerlink" title="造测试数据"></a>造测试数据</h3><blockquote><p>直接上代码，如下的代码可以仿造出64位的加密字符串，达到模拟某种加密的方式，如此方式造了100w的数据用于测试。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">key = <span class="string">""</span>.join(random.choice(<span class="string">"0123456789ABCDEF"</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>))</div></pre></td></tr></table></figure><h3 id="导数据"><a href="#导数据" class="headerlink" title="导数据"></a>导数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">use</span> koulb;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> t_card_info (<span class="keyword">key</span> <span class="keyword">string</span>)</div><div class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span></div><div class="line"><span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">','</span></div><div class="line">Location <span class="string">'/user/koulingbo/cardInfo'</span>;</div></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_card_info_row <span class="keyword">as</span> </div><div class="line"><span class="keyword">select</span> row_number() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">key</span>) <span class="keyword">as</span> rn,<span class="keyword">key</span> <span class="keyword">from</span> t_card_info;</div><div class="line"></div><div class="line"> number of reducers: 1</div></pre></td></tr></table></figure><blockquote><p>众所周知 hive 中的order by 适用于全局排序，所以它只能是给到一个reduce来完成，因为不同的parttion来分区到不同的reduce就决定了只能reduce内部有序，如果你想达到全局排序只能够是一个reduce。</p></blockquote><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><blockquote><p>思路：使用分位数函数来定位切割点，然后转置→行转列，与之前的行号join拿到最终的分界点。当然最初你要根据tsv 的大小、snappy压缩比、以及region的大小（根据hfile以及其个数确定）来确定要分成几个region,本文暂定为100个分区来做演示。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var="1/100"</div><div class="line">for i in &#123;2..99&#125;</div><div class="line">do</div><div class="line">        var="$var,$i/100"</div><div class="line">done</div><div class="line">echo $var</div><div class="line"></div><div class="line">hive -S -e "use koulb;create table koulb.t_card_info_res as select k.key from \</div><div class="line">(select explode(percentile_approx(rn,array($&#123;var&#125;),2168727))as keyRange \</div><div class="line">from koulb.t_card_info_row) r join koulb.t_card_info_row k on floor(r.keyRange)=k.rn;" </div><div class="line"></div><div class="line">hive -S -e "select * from koulb.t_card_info_res"&gt;res</div></pre></td></tr></table></figure><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create 'card_quota_test_koulb', &#123;NAME =&gt; 'n', VERSIONS =&gt; 1, COMPRESSION =&gt; 'SNAPPY'&#125;,  &#123;SPLITS_FILE =&gt; 'res'&#125;</div></pre></td></tr></table></figure><h2 id="mapreduce部分"><a href="#mapreduce部分" class="headerlink" title="mapreduce部分"></a>mapreduce部分</h2><p>==未完待续==</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;完成排序，打行号，然后根据分位数找到分界点。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/python/"/>
    
      <category term="mapreduce" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/mapreduce/"/>
    
      <category term="hive" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/hive/"/>
    
      <category term="row_number" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/row-number/"/>
    
      <category term="percentile" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/percentile/"/>
    
      <category term="explode" scheme="http://www.tangyuxiaoyao.club/ITWO/tags/explode/"/>
    
  </entry>
  
</feed>
